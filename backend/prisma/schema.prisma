// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User accounts and authentication
model User {
  id                String   @id @default(uuid())
  email             String   @unique
  password          String
  name              String?
  avatar            String?
  isEmailVerified   Boolean  @default(false)
  emailVerifyToken  String?
  resetPasswordToken String?
  subscriptionPlan  Plan     @default(STARTER)
  subscriptionStatus SubscriptionStatus @default(TRIAL)
  stripeCustomerId  String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  widgets       Widget[]
  conversations Conversation[]
  apiKeys       ApiKey[]
  teamMembers   TeamMember[]
  usageRecords  UsageRecord[]

  @@map("users")
}

// Team collaboration
model TeamMember {
  id     String   @id @default(uuid())
  userId String
  email  String
  role   TeamRole @default(MEMBER)
  status InviteStatus @default(PENDING)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("team_members")
}

// Chatbot widgets
model Widget {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String?
  isActive    Boolean  @default(true)
  
  // Widget configuration (stored as JSON)
  config      Json     @default("{}")
  
  // Integration settings
  webhookUrl  String?
  apiKey      String?  @unique
  
  // Usage statistics
  totalConversations Int @default(0)
  totalMessages      Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  analytics     Analytics[]

  @@map("widgets")
}

// Conversation sessions
model Conversation {
  id        String   @id @default(uuid())
  widgetId  String
  userId    String
  sessionId String   @unique
  
  // Conversation metadata
  visitorId    String?
  visitorInfo  Json?    @default("{}")
  isActive     Boolean  @default(true)
  satisfaction Int?     // 1-5 rating
  
  startedAt DateTime @default(now())
  endedAt   DateTime?
  updatedAt DateTime @updatedAt

  // Relations
  widget   Widget    @relation(fields: [widgetId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id])
  messages Message[]

  @@map("conversations")
}

// Individual messages
model Message {
  id             String   @id @default(uuid())
  conversationId String
  
  // Message content
  content        String
  role           MessageRole
  messageType    MessageType @default(TEXT)
  metadata       Json?       @default("{}")
  
  // AI processing info
  aiModel        String?
  aiTokens       Int?
  processingTime Int?        // milliseconds
  
  createdAt DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// API keys for programmatic access
model ApiKey {
  id      String   @id @default(uuid())
  userId  String
  name    String
  key     String   @unique
  isActive Boolean @default(true)
  
  // Usage tracking
  lastUsed     DateTime?
  requestCount Int       @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// Analytics and usage tracking
model Analytics {
  id       String      @id @default(uuid())
  widgetId String
  date     DateTime    @db.Date
  
  // Metrics
  conversations     Int @default(0)
  messages          Int @default(0)
  uniqueVisitors    Int @default(0)
  avgResponseTime   Float?
  satisfactionScore Float?
  
  // Metadata
  metadata Json? @default("{}")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  widget Widget @relation(fields: [widgetId], references: [id], onDelete: Cascade)

  @@unique([widgetId, date])
  @@map("analytics")
}

// Usage records for billing
model UsageRecord {
  id     String    @id @default(uuid())
  userId String
  date   DateTime  @db.Date
  
  // Usage metrics
  conversations Int @default(0)
  messages      Int @default(0)
  voiceMinutes  Float @default(0)
  fileStorage   Float @default(0) // MB
  
  // Billing
  amount        Float?  // in cents
  isProcessed   Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("usage_records")
}

// Enums
enum Plan {
  TRIAL
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
}

enum TeamRole {
  ADMIN
  MEMBER
  VIEWER
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  VOICE
  SYSTEM
}