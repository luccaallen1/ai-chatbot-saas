// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tenant (healthcare clinic)
model Tenant {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  botConfig     BotConfig?
  integrations  Integration[]
  conversations Conversation[]

  @@map("tenants")
}

// Bot configuration for each tenant
model BotConfig {
  id        String   @id @default(uuid())
  tenantId  String   @unique
  
  // Business details
  phone     String?
  timezone  String   @default("America/Chicago")
  address   String?
  
  // Configuration as JSONB
  services  Json?    @default("[]") // Array of {name, durationMin, price}
  hours     Json?    @default("{}") // Weekly schedule
  faqs      Json?    @default("[]") // Array of {q, a}
  brand     Json?    @default("{}") // {primaryColor, logoUrl}
  flags     Json?    @default("{}") // {websiteWidget, socialDM, emailEnabled}
  
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("bot_configs")
}

// Integration tokens and references
model Integration {
  id         String   @id @default(uuid())
  tenantId   String
  provider   String   // google, facebook, instagram, gmail
  externalId String?  // pageId, igBusinessId, googleUserId
  tokenRef   String   @unique // Reference to resolve via Uppile
  scopes     String[] // Array of granted scopes
  metadata   Json?    @default("{}") // Extra data like calendarId
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, provider])
  @@map("integrations")
}

// Conversation sessions
model Conversation {
  id        String   @id @default(uuid())
  tenantId  String
  sessionId String   @unique
  source    String?  // website, facebook, instagram, sms, email
  
  // Conversation metadata
  visitorInfo  Json?    @default("{}")
  isActive     Boolean  @default(true)
  
  startedAt DateTime @default(now())
  endedAt   DateTime?
  updatedAt DateTime @updatedAt

  // Relations
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

// Individual messages
model Message {
  id             String   @id @default(uuid())
  conversationId String
  
  // Message content
  content        String
  role           MessageRole
  messageType    MessageType @default(TEXT)
  metadata       Json?       @default("{}")
  
  createdAt DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Enums

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  VOICE
  SYSTEM
}